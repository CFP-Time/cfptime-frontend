name: Build
on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - uses: actions/checkout@v1

      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: npm run build
        run: |
          npm ci
          (echo y; echo y; echo y; echo y;) | sudo npm install -g @angular/cli
          npm run build --prod --outputHashing=none --optimization=false

      # Step 5: Create a zip archive of the dist folder
      - name: Create zip of dist folder
        run: zip -j -r dist.zip dist/cfptime-frontend/

      # Step 6: Deploy to remote server
      - name: Deploy to remote server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "dist.zip"
          target: "~/"

      # Step 7: SSH into remote host and unzip
      - name: SSH and unzip
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SERVER }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            rm -Rf ${{ secrets.REMOTE_PATH }}
            mkdir ${{ secrets.REMOTE_PATH }}
            unzip -o ~/dist.zip -d ${{ secrets.REMOTE_PATH }}
            rm ~/dist.zip

      # - name: Copy folder content recursively to remote
      #   uses: garygrossgarten/github-action-scp@release
      #   with:
      #     local: dist.zip
      #     remote: ${{ secrets.SSH_PATH }}
      #     host: ${{ secrets.SERVER }}
      #     port: ${{ secrets.SSH_PORT }}
      #     username: ${{ secrets.SSH_USER }}
      #     privateKey: ${{ secrets.SSH_PRIVATE_KEY }}